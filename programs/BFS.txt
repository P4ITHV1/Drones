from dronekit import connect, VehicleMode, LocationGlobalRelative
import time, math
from collections import deque

# Connect to the vehicle
vehicle = connect('udp:127.0.0.1:14550')

# Prep for takeoff
vehicle.mode = VehicleMode("GUIDED")
vehicle.armed = True
vehicle.simple_takeoff(10)

# Wait for the drone to reach the target altitude
while True:
    altitude = vehicle.location.global_relative_frame.alt
    if altitude >= 9.5:
        break
    time.sleep(1)

# Define waypoints
waypoints = [
    LocationGlobalRelative(37.6210, -122.3880, 20),
    LocationGlobalRelative(37.6225, -122.3860, 20),
    LocationGlobalRelative(37.6235, -122.3840, 20),
    LocationGlobalRelative(37.6245, -122.3820, 20),
    LocationGlobalRelative(37.6255, -122.3800, 20),
    LocationGlobalRelative(37.6265, -122.3780, 20),
    LocationGlobalRelative(37.6275, -122.3760, 20),
    LocationGlobalRelative(37.6285, -122.3740, 20)
]

# Define distance function
def distance_to(self, other):
    dlat = other.lat - self.lat
    dlong = other.lon - self.lon
    return math.sqrt((dlat*dlat) + (dlong*dlong)) * 1.113195e5

# Define BFS algorithm
def bfs(graph, start, goal):
    queue = deque([(start, [])])
    visited = set()

    while queue:
        current, path = queue.popleft()
        if current == goal:
            path.append(current)
            return path

        visited.add(current)

        for next_node in graph:
            if next_node not in visited:
                if distance_to(current, next_node) <= 1.0:
                    queue.append((next_node, path + [current]))

    return None

# Use BFS to compute the path between waypoints
graph = waypoints
start = vehicle.location.global_relative_frame
goal = waypoints[-1]
path = bfs(graph, start, goal)

# Fly the drone to each waypoint in the path
for wp in path:
    vehicle.simple_goto(wp)
    while True:
        if distance_to(vehicle.location.global_relative_frame, wp) <= 1.0:
            print("Reached target location")
            break
        time.sleep(1)

# Land the drone
vehicle.mode = VehicleMode("LAND")

# Close the connection to the vehicle
vehicle.close()
